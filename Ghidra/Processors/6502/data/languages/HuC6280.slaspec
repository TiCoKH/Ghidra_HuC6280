# sleigh specification file for HuC6280

define endian=little;
define alignment=1;

define space RAM       type=ram_space      size=2    default;
define space register type=register_space size=1;

define register offset=0x50 size=1 [ A X Y P ];
define register offset=0x20 size=2 [ PC      SP   ];
define register offset=0x20 size=1 [ PCL PCH S SH DH LH ];
define register offset=0x30 size=1 [ N V T B D I Z C ];                         # status bits
define register offset=0x40 size=1 [ MPR0 MPR1 MPR2 MPR3 MPR4 MPR5 MPR6 MPR7 ]; # MMU register

define register offset=0x0000 size=1 [VDC_ST0];
define register offset=0x0002 size=1 [VDC_ST1];
define register offset=0x0003 size=1 [VDC_ST2];

#TOKENS

define token opbyte (8)
    op  = (0,7)

    aaa = (5,7)
    bbb = (2,4)
    cc  = (0,1)
;

define token data8 (8)
    imm8    = (0,7)
    imm82   = (0,7)
    rel     = (0,7) signed
;

define token data (16)
    imm16 = (0,15)
    src16 = (0,15)
    dst16 = (0,15)
    lng16 = (0,15)
;
define token bitopbyte (8)
    bitop    = (0,7)

    action   = (7,7)
    bitindex = (4,6) dec
    optype   = (0,3)
;

define token testopbyte (8)
    top  = (0, 7)
    taaa = (5, 7)
    td   = (4, 4)
    tbb  = (2, 3)
    tcc  = (0, 1)
;

#define token tstopt (8)
#    tstop   = (0, 7)
#
#    tstaa   = (6, 7)
#    tstbb   = (4, 5)
#    tstcccc = (0, 3)
#;

#define token transdata (48)
#    src16 = (32,47)
#    dst16 = (16,31)
#    lng16 = (0,15)
#;

#MACROS

macro popSR() {
    local ccr = *:1 SP;
    N = ccr[7,1];
    V = ccr[6,1];
    T = ccr[5,1];
    B = ccr[4,1];
    D = ccr[3,1];
    I = ccr[2,1];
    Z = ccr[1,1];
    C = ccr[0,1];
}

macro pushSR() {
    local ccr:1 = 0xff;
    ccr[7,1] = N;
    ccr[6,1] = V;
    ccr[5,1] = T;
    ccr[4,1] = B;
    ccr[3,1] = D;
    ccr[2,1] = I;
    ccr[1,1] = Z;
    ccr[0,1] = C;
    *:1 (SP) = ccr;
    SP = SP -1;
}

macro resultFlags(value) {
    Z = (value == 0);
    N = (value s< 0);
}

macro subtraction_flags1(register, operand, result) {
    local complement_register = ~register;

    V = ( ((register & ~operand & ~result) | (complement_register & operand & result)) & 0b10000000 ) != 0;
    N = (result s< 0);
    Z = (result == 0);
    C = ( ((complement_register & operand) | (operand & result) | (result & complement_register)) & 0b10000000 ) != 0;
}

macro bcd_add(op1, op2, result) {
    local op1_high_nibble = op1 & 0xf0;
    local op1_low_nibble = op1 & 0x0f;
    local op2_high_nibble = op2 & 0xf0;
    local op2_low_nibble = op2 & 0x0f;
    local low_result = op1_low_nibble + op2_low_nibble + C;
    local internal_bcd_carry = (low_result > 9);
    low_result = low_result + 6 * internal_bcd_carry;
    local high_result = op1_high_nibble + op2_high_nibble + internal_bcd_carry;
    C = (high_result > 9);
    result = high_result + low_result;
    N = (result s< 0);
    Z = (result == 0);
}

################################################################
# Psuedo Instructions
################################################################

define pcodeop readIRQ;

################################################################
REL: reloc      is rel [ reloc = inst_next + rel; ] { export *:2 reloc; }

# Immediate
OP1: "#"imm8    is bbb=2; imm8         { tmp:1 = imm8; export tmp; }
# Zero Page
OP1: imm8       is bbb=1; imm8         { zpaddr:2 = 0x2000 + imm8; export *:1 zpaddr; }
# Zero Page Indexed X
OP1: imm8,X     is bbb=5 & X; imm8     { tmp:2 = zext(imm8 + X); zpaddr:2 = 0x2000 + tmp; export *:1 zpaddr; }
# Absolute
OP1: imm16      is bbb=3; imm16        { export *:1 imm16; }
# Absolute Indexed X
OP1: imm16,X    is bbb=7 & X; imm16    { tmp:2 = imm16 + zext(X); export *:1 tmp; }
# Absolute Indexed Y
OP1: imm16,Y    is bbb=6 & Y; imm16    { tmp:2 = imm16 + zext(Y); export *:1 tmp; }
# Indirect X
OP1: (imm8,X)   is bbb=0 & X; imm8     { zpaddr:2 = zext(0x2000 + imm8 + X); tmp:2 = *:2 zpaddr; export *:1 tmp; }
# Indirect Y
OP1: (imm8),Y   is bbb=4 & Y; imm8     { zpaddr:2 = 0x2000 + imm8; tmp:2 = *:2 zpaddr; tmp = tmp + zext(Y); export *:1 tmp; }

# Immediate
OP2: "#"imm8    is bbb=0; imm8         { tmp:1 = imm8; export tmp; }
# Zero Page
OP2: imm8       is bbb=1; imm8         { zpaddr:2 = 0x2000 + imm8; export *:1 zpaddr; }
OP2: A          is bbb=2 & A           { export A; }
# Absolute
OP2: imm16      is bbb=3; imm16        { export *:1 imm16; }
# Zero Page Indexed X
OP2: imm8,X     is bbb=5 & X; imm8     { tmp:2 = zext(imm8 + X); zpaddr:2 = 0x2000 + tmp; export *:1 zpaddr; }
# Absolute Indexed X
OP2: imm16,X    is bbb=7 & X; imm16    { tmp:2 = imm16 + zext(X); export *:1 tmp; }

OP2ST: OP2      is OP2                 { export OP2; }
OP2ST: imm8,Y   is bbb=5 & Y; imm8     { tmp:2 = zext(imm8 + Y); zpaddr:2 = 0x2000 + tmp; export *:1 zpaddr; }

OP2LD: OP2      is OP2                 { export OP2; }
OP2LD: imm8,Y   is bbb=5 & Y; imm8     { tmp:2 = zext(imm8 + Y); zpaddr:2 = 0x2000 + tmp; export *:1 zpaddr; }
OP2LD: imm16,Y  is bbb=7 & Y; imm16    { tmp:2 = imm16 + zext(Y); export *:1 tmp; }


ADDR8:  imm8    is imm8                { export *:1 imm8; }
ADDR16: imm16   is imm16               { export *:1 imm16; }
ADDRI:  imm16   is imm16               { tmp:2 = imm16; export *:2 tmp; }

# Zero Page Indirect
ZIOP: (imm8)    is bbb=4; imm8         { addr:2 = 0x2000 + imm8; tmp:2 = *:2 addr; export *:1 tmp; }
# Table for TSB, TSR
OPTB:   imm8      is tbb=1; imm8       { zpaddr:2 = 0x2000 + imm8; export *:1 zpaddr; }
OPTB:   imm16     is tbb=3; imm16      { export *:1 imm16; }
# Table for TST
#OPTST: imm8       is op=0x83; imm8         { zpaddr:2 = 0x2000 + imm8; export *:1 zpaddr; }
#OPTST: imm8,X     is op=0xA3 & X; imm8     { tmp:2 = zext(imm8 + X); zpaddr:2 = 0x2000 + tmp; export *:1 zpaddr; }
#OPTST: imm16      is op=0x93; imm16        { export *:1 imm16;  }
#OPTST: imm16,X    is op=0xB3 & X; imm16    { tmp:2 = imm16 + zext(X); export *:1 tmp; }
# Absolute Indexed Indirect
ADDRIX: (imm16,X) is X; imm16          { addr:2 = imm16 + zext(X); tmp:2 = *:2 addr; export tmp; }

# Instructions


:ADC OP1    is (cc=1 & aaa=3) ... & OP1
{
    local op1 = OP1;
    if (T == 0) & (D == 0) goto <notT_and_notD>;
    if (T == 1) & (D == 0) goto <T_and_notD>;
    if (T == 0) & (D == 1) goto <notT_and_D>;
    if (T == 1) & (D == 1) goto <T_and_D>;
<notT_and_notD> #HuC6280 legacy 6502
    local tmpC1 = C;
    C = carry(A, op1);
    A = A + op1 + tmpC1;
    resultFlags(A);
    V = C;
    goto <end>;
<T_and_notD> #HuC6280 ZeroPage addressed
    T = 0;
    local tmpC2 = C;
    local addr1:2 = 0x2000 + zext(X);
    local mxval1 = *:1 addr1;
    C = carry(mxval1, op1);
    local newval1 = mxval1 + op1 + tmpC2;
    *:1 addr1 = newval1;
    resultFlags(newval1);
    V = C;
    goto <end>;
<notT_and_D> #HuC6280 decimal
    local op21 = A;
    local result1 = 0;
    bcd_add(op1, op21, result1);
    A = result1;
    goto <end>;
<T_and_D> #HuC6280 decimal ZeroPage addressed
    T = 0;
    local addr2:2 = 0x2000 + zext(X);
    local op22 = *:1 addr2;
    local result2 = 0;
    bcd_add(op1, op22, result2);
    *:1 addr2 = result2;
<end>
}

:ADC ZIOP    is (cc=2 & aaa=3) ... & ZIOP #HuC6280 ZeroPage Indirect
{
    local op1 = ZIOP;
    if (T == 0) & (D == 0) goto <notT_and_notD>;
    if (T == 1) & (D == 0) goto <T_and_notD>;
    if (T == 0) & (D == 1) goto <notT_and_D>;
    if (T == 1) & (D == 1) goto <T_and_D>;
<notT_and_notD> #HuC6280 legacy 6502
    local tmpC1 = C;
    C = carry(A, op1);
    A = A + op1 + tmpC1;
    resultFlags(A);
    V = C;
    goto <end>;
<T_and_notD> #HuC6280 ZeroPage addressed
    T = 0;
    local tmpC2 = C;
    local addr1:2 = 0x2000 + zext(X);
    local mxval1 = *:1 addr1;
    C = carry(mxval1, op1);
    local newval1 = mxval1 + op1 + tmpC2;
    *:1 addr1 = newval1;
    resultFlags(newval1);
    V = C;
    goto <end>;
<notT_and_D> #HuC6280 decimal
    local op21 = A;
    local result1 = 0;
    bcd_add(op1, op21, result1);
    A = result1;
    goto <end>;
<T_and_D> #HuC6280 decimal ZeroPage addressed
    T = 0;
    local addr2:2 = 0x2000 + zext(X);
    local op22 = *:1 addr2;
    local result2 = 0;
    bcd_add(op1, op22, result2);
    *:1 addr2 = result2;
<end>
}

:AND OP1    is (cc=1 & aaa=1) ... & OP1
{
    if (T == 1) goto <Ton>;
    A = A & OP1; 
    resultFlags(A);
    goto <end>;
<Ton>
    T = 0;
    local addr:2 = 0x2000 + zext(X);
    local mxval = *:1 addr;
    local newval = mxval & OP1;
    *:1 addr =newval;
    resultFlags(newval);
<end>
}

:AND ZIOP    is (cc=2 & aaa=1) ... & ZIOP
{
    if (T == 1) goto <Ton>;
    A = A & ZIOP;
    resultFlags(A);
    goto <end>;
<Ton>
    T = 0;
    local addr:2 = 0x2000 + zext(X);
    local mxval = *:1 addr;
    local newval = mxval & ZIOP;
    *:1 addr =newval;
    resultFlags(newval);
<end>
}

:ASL OP2    is (op=0x06 | op=0x0A | op=0x0E | op=0x16 | op=0x1E) ... & OP2
{
    T = 0;
    local tmp = OP2;
    C = tmp >> 7;
    tmp = tmp << 1;
    OP2 = tmp;
    resultFlags(tmp);
}

:BBR^bitindex, imm8, REL    is (action=0 & optype=0xF) & bitindex ; imm8 ; REL
{
    T = 0;
    local ptr:2 = 0x2000 + imm8;
    local value:1 = *:1 ptr;
    local jump = (value & (1 << bitindex)) == 0;
    if (jump) goto REL;
}

:BBS^bitindex, imm8, REL    is (action=1 & optype=0xF) & bitindex ; imm8 ; REL
{
    T = 0;
    local ptr:2 = 0x2000 + imm8;
    local value:1 = *:1 ptr;
    local jump = (value & (1 << bitindex)) != 0;
    if (jump) goto REL;
}

:BCC  REL    is op=0x90; REL
{
    T = 0;
    if (C == 0) goto REL;
}

:BCS  REL    is op=0xB0; REL
{
    T = 0;
    if (C) goto REL;
}

:BEQ  REL    is op=0xF0; REL
{
    T = 0;
    if (Z) goto REL;
}

:BIT OP2     is (op=0x24 | op=0x2C) ... & OP2
{
    T = 0;
    N = (OP2 & 0x80) == 0x80;
    V = (OP2 & 0x40) == 0x40;
    local value = A & OP2;
    Z = (value == 0);
}

:BIT "#"imm8    is op=0x89; imm8
{
    T = 0;
    local value:1 = imm8;
    N = (value & 0x80) == 0x80;
    V = (value & 0x40) == 0x40;
    value = A & value;
    Z = (value == 0);
}

:BIT OP2    is (op=0x34 | op=0x3C) ... & OP2
{
    T = 0;
    N = (OP2 & 0x80) == 0x80;
    V = (OP2 & 0x40) == 0x40;
    local value = A & OP2;
    Z = (value == 0);
}

:BMI  REL    is op=0x30; REL
{
    T = 0;
    if (N) goto REL;
}

:BNE  REL    is op=0xD0; REL
{
    T = 0;
    if (Z == 0) goto REL;
}

:BPL  REL    is op=0x10; REL
{
    T = 0;
    if (N == 0) goto REL;
}

:BRA  REL    is op=0x80; REL
{
    T = 0;
    goto REL;
}

:BRK    is op=0x00
{
    T = 0;
    D = 0;
    *:2 (SP - 1) = inst_next;
    SP = SP - 2;
    B = 1;
    pushSR();
    I = 1;
    local target:2 = 0xFFFE;
    goto [*:2 target];
}

:BSR  REL    is op=0x44; REL
{
    T = 0;
    goto REL;
}

:BVC  REL    is op=0x50; REL
{
    T = 0;
    if (V == 0) goto REL;
}

:BVS  REL    is op=0x70; REL
{
    T = 0;
    if (V) goto REL;
}

:CLA    is op=0x62
{
    T = 0;
    A = 0x00;
}

:CLC    is op=0x18
{
    T = 0;
    C = 0;
}

:CLD    is op=0xD8
{
    T = 0;
    D = 0;
}

:CLI    is op=0x58
{
    T = 0;
    I = 0;
}

:CLV    is op=0xB8
{
    T = 0;
    V = 0;
}

:CLX    is op=0x82
{
    T = 0;
    X = 0x00;
}

:CLY    is op=0xC2
{
    T = 0;
    Y = 0x00;
}

:CMP OP1    is (cc=1 & aaa=6) ... & OP1
{ 
    T = 0;
    local op1 = OP1;
    local tmp = A - op1;
    resultFlags(tmp);
    C = (A >= op1);
}

:CMP ZIOP    is (cc=2 & aaa=6) ... & ZIOP
{
    T = 0;
    local op1 = ZIOP;
    local tmp = A - op1;
    resultFlags(tmp);
    C = (A >= op1);
}

:CPX OP2    is (op=0xE0 | op=0xE4 | op=0xEC) ... & OP2
{
    T = 0;
    local op1 = OP2;
    local tmp = X - op1;
    resultFlags(tmp);
    C = (X >= op1);
}

:CPY OP2    is (op=0xC0 | op=0xC4 | op=0xCC) ... & OP2
{
    T = 0;
    local op1 = OP2;
    local tmp = Y - op1;
    resultFlags(tmp);
    C = (Y >= op1);
}

:CSH    is op=0xD4
{
    T = 0;
}

:CSL    is op=0x54
{
    T = 0;
}

:DEC OP2    is (op=0xC6 | op=0xCE | op=0xD6 | op=0xDE) ... & OP2
{
    T = 0;
    local tmp = OP2 - 1;
    OP2 = tmp;
    resultFlags(tmp);
}

:DEC A    is op=0x3A & A
{
    T = 0;
    local tmp = A - 1;
    A = tmp;
    resultFlags(tmp);
}

:DEX    is op=0xCA
{
    T = 0;
    X = X - 1;
    resultFlags(X);
}

:DEY    is op=0x88
{
    T = 0;
    Y = Y - 1;
    resultFlags(Y);
}

:EOR OP1    is (cc=1 & aaa=2) ... & OP1
{ 
    local op1 = OP1;
    if (T == 1) goto <isT>;
#HuC6280 legacy 6502
    A = A ^ op1;
    resultFlags(A);
    goto <end>;
<isT> #HuC6280 ZeroPage addressed
    T = 0;
    local addr:2 = 0x2000 + zext(X);
    local mxval = *:1 addr;
    mxval = mxval ^ op1;
    resultFlags(mxval);
    *:1 addr = mxval;
<end>
}

:EOR ZIOP    is (cc=2 & aaa=2) ... & ZIOP #HuC6280 ZeroPage indirect
{
    local op1 = ZIOP;
    if (T == 1) goto <isT>;
#HuC6280 legacy 6502
    A = A ^ op1;
    resultFlags(A);
    goto <end>;
<isT> #HuC6280 ZeroPage addressed
    T = 0;
    local addr:2 = 0x2000 + zext(X);
    local mxval = *:1 addr;
    mxval = mxval ^ op1;
    resultFlags(mxval);
    *:1 addr = mxval;
<end>
}

:INC OP2    is (op=0xE6 | op=0xEE | op=0xF6 | op=0xFE) ... & OP2
{
    T = 0;
    local tmp = OP2 + 1;
    OP2 = tmp;
    resultFlags(tmp);
}

:INC A    is op=0x1A & A
{
    T = 0;
    A = A + 1;
    resultFlags(A);
}

:INX    is op=0xE8
{
    T = 0;
    X = X + 1;
    resultFlags(X);
}

:INY    is op=0xC8
{
    T = 0;
    Y = Y + 1;
    resultFlags(Y);
}

:JMP ADDR16    is (op=0x4C); ADDR16
{
    T = 0;
    goto ADDR16;
}

:JMP ADDRI    is (op=0x6C); ADDRI
{
    T = 0;
    goto [ADDRI];
}

:JMP ADDRIX    is (op=0x7C); ADDRIX
{
    T = 0;
    goto [ADDRIX];
}

:JSR ADDR16    is op=0x20; ADDR16
{
    T = 0;
    *:2 (SP-1) = inst_next;
    SP=SP-2; 
    call ADDR16;
}

:LDA OP1    is (cc=1 & aaa=5) ... & OP1
{
    T = 0;
    A = OP1;
    resultFlags(A);
}

:LDA ZIOP    is (cc=2 & aaa=5) ... & ZIOP
{
    T = 0;
    A = ZIOP;
    resultFlags(A);
}

:LDX OP2LD    is (op=0xA2 | op=0xA6 | op=0xAE | op=0xB6 | op=0xBE) ... & OP2LD
{
    T = 0;
    X = OP2LD;
    resultFlags(X);
}

:LDY OP2    is (op=0xA0 | op=0xA4 | op=0xAC | op=0xB4 | op=0xBC) ... & OP2
{
    T = 0;
    Y = OP2;
    resultFlags(Y);
}

:LSR OP2    is (op=0x46 | op=0x4A | op=0x4E | op=0x56 | op=0x5E) ... & OP2
{
    T = 0;
    local tmp = OP2;
    C = tmp & 1;
    tmp = tmp >> 1;
    OP2 = tmp;
    Z = (tmp == 0);
    N = 0;	
}

:NOP    is op=0xEA
{
    T = 0;
}

:ORA OP1    is  (cc=1 & aaa=0) ... & OP1
{
    local op1 = OP1;
    if (T == 1) goto <isT>;
#HuC6280 legacy 6502
    A = A | op1; 
    resultFlags(A);
    goto <end>;
<isT> #HuC6280 ZeroPage addressed
    T = 0;
    local addr:2 = 0x2000 + zext(X);
    local mxval = *:1 addr;
    mxval = A | op1; 
    resultFlags(mxval);
    *:1 addr = mxval;
<end>
}

:ORA  ZIOP    is (cc=2 & aaa=0) ... & ZIOP #HuC6280 ZeroPage indirect
{
    local op1 = ZIOP;
    if (T == 1) goto <isT>;
#HuC6280 legacy 6502
    A = A | op1; 
    resultFlags(A);
    goto <end>;
<isT> #HuC6280 ZeroPage addressed
    T = 0;
    local addr:2 = 0x2000 + zext(X);
    local mxval = *:1 addr;
    mxval = A | op1; 
    resultFlags(mxval);
    *:1 addr = mxval;
<end>
}

:PHA    is op=0x48
{
    T = 0;
    *:1 (SP) = A;
    SP = SP - 1;
}

:PHP    is op=0x08
{
    T = 0;
    pushSR();
}

:PHX    is op=0xDA
{
    T = 0;
    *:1 (SP) = X;
    SP = SP - 1;
}

:PHY    is op=0x5A
{
    T = 0;
    *:1 (SP) = Y;
    SP = SP - 1;
}

:PLA    is op=0x68
{
    T = 0;
    SP = SP + 1;
    A = *:1 (SP);
    resultFlags(A);
}

:PLP    is op=0x28
{
    popSR();
}


:PLX    is op=0xFA
{
    T = 0;
    SP = SP + 1;
    X = *:1 (SP);
    resultFlags(X);
}

:PLY    is op=0x7A
{
    T = 0;
    SP = SP + 1;
    Y = *:1 (SP);
    resultFlags(Y);
}

:RMB^bitindex, imm8    is (action=0 & optype=7) & bitindex ; imm8
{
    T = 0;
    local ptr:2 = 0x2000 + imm8;
    local value:1 = *:1 ptr;
    value = value & ~(1 << bitindex);
    *:1 ptr = value;
}

:ROL OP2    is (op=0x26 | op=0x2A | op=0x2E | op=0x36 | op=0x3E) ... & OP2
{
    T = 0;
    local tmpC = C;
    local op2 = OP2;
    C = op2 >> 7;
    local result = op2 << 1;
    result = result | tmpC;
    OP2 = result;
    resultFlags(result);
}

:ROR OP2    is (op=0x66 | op=0x6A | op=0x6E | op=0x76 | op=0x7E) ... & OP2
{
    T = 0;
    local tmpC = C << 7;
    local tmp = OP2;
    C = tmp & 1;
    tmp = tmp >> 1;
    tmp = tmp | tmpC;
    OP2 = tmp;
    resultFlags(tmp);
}
:RTI    is op=0x40
{
    popSR();
    SP = SP+1;

    SP = SP+1;
    tmp:2 = *:2 SP;
    SP = SP+1;

    return [tmp];
}

:RTS    is op=0x60
{
    T = 0;
    SP = SP+1;
    tmp:2 = *:2 SP;
    SP = SP+1;

    return [tmp];
}

:SAX    is op=0x22
{
    T = 0;
    local tmp = X;
    X = A;
    A = tmp;
}

:SAY    is op=0x42
{
    T = 0;
    local tmp = Y;
    Y = A;
    A = tmp;
}

:SBC OP1    is (cc=1 & aaa=7) ... & OP1
{
    T = 0;
    local op1 = OP1;
    if (D == 1) goto <isD>;
    local result = A - op1 - !C;
    
    subtraction_flags1(A, op1, result);
    A = result;
    goto <end>;
<isD> #HuC6280 Decimal
    local complement9 = 99-A;
    local result2 = 0;
    bcd_add(op1,complement9,result2);
    result2 = result2+1;
    subtraction_flags1(A, op1, result2);
    A = result2; 
<end>
}

:SBC ZIOP    is (cc=2 & aaa=7) ... & ZIOP #ZeroPage Indirect
{
    T = 0;
    local op1 = ZIOP;
    if (D == 1) goto <isD>;
    local result = A - op1 - !C;
    
    subtraction_flags1(A, op1, result);
    A = result;
    goto <end>;
<isD> #HuC6280 Decimal
    local complement9 = 99-A;
    local result2 = 0;
    bcd_add(op1,complement9,result2);
    result2 = result2+1;
    subtraction_flags1(A, op1, result2);
    A = result2; 
<end>
}

:SEC    is op=0x38
{
    T = 0;
    C = 1;
}

:SED    is op=0xF8
{
    T = 0;
    D = 1;
}

:SEI    is op=0x78
{
    T = 0;
    I = 1;
}

:SET    is op=0xF4
{
    T = 1;
}

:SMB^bitindex, imm8    is (action=1 & optype=7) & bitindex ; imm8
{
    T = 0;
    local ptr:2 = 0x2000 + imm8;
    local value:1 = *:1 ptr;
    value = value | (1 << bitindex);
    *:1 ptr = value;
}

:ST0 "#"imm8    is op=0x03; imm8
{
    T = 0;
    VDC_ST0 = imm8;
}

:ST1 "#"imm8    is op=0x13; imm8
{
    T = 0;
    VDC_ST1 = imm8;
}

:ST2 "#"imm8    is op=0x23; imm8
{
    T = 0;
    VDC_ST2 = imm8;
}

:STA OP1    is (cc=1 & aaa=4) ... & OP1
{
    T = 0;
    OP1 = A;
}

:STA ZIOP    is (cc=2 & aaa=4) ... & ZIOP
{
    T = 0;
    ZIOP = A;
}

:STX OP2ST    is (op=0x86 | op=0x8E | op=0x96) ... & OP2ST
{
    T = 0;
    OP2ST = X;
}

:STY OP2    is (op=0x84 | op=0x8C | op=0x94) ... & OP2
{
    T = 0;
    OP2 = Y;
}

:STZ imm8    is op=0x64 ; imm8
{
    T = 0;
    local tmp:2 = 0x2000 + imm8;
    *:1 tmp = 0;
}

:STZ imm8,X    is op=0x74 & X ; imm8
{
    T = 0;
    local tmp:2 = zext(imm8 + X);
    local zpaddr:2 = 0x2000 + tmp;
    *:1 zpaddr = 0;
}

:STZ imm16    is op=0x9C ; imm16
{
    T = 0;
    local tmp:2 = imm16;
    *:1 tmp = 0;
}

:STZ imm16,X    is op=0x9E & X ; imm16
{
    local tmp:2 = imm16 + zext(X);
    *:1 tmp = 0;
}

:SXY    is op=0x02
{
    T = 0;
    local tmp = Y;
    Y = X;
    X = tmp;
}

:TAI src16, dst16, lng16   is op=0xF3 ; src16; dst16; lng16  #Transfer Alternate Increment
{
    *:1 (SP) = Y;  #push Y
    SP = SP - 1;
    *:1 (SP) = A;  #push A
    SP = SP - 1;
    *:1 (SP) = X;  #push X
    SP = SP - 1;
    T = 0;
    local src:2 = src16;
    local dst:2 = dst16;
    local lng:2 = lng16;
    local value:1 = 0;
    local alt:1 = 0;
<loop>
    src = src + zext(alt);
    value = *:1 src;
    *:1 dst = value;
    dst = dst + 1;
    lng = lng - 1;
    alt = !alt;
    if (lng != 0) goto <loop>;
    SP = SP + 1;  #pull X
    X = *:1 (SP);
    resultFlags(X);
    SP = SP + 1;  #pull A
    A = *:1 (SP);  
    resultFlags(A);
    SP = SP + 1;  #pull Y
    Y = *:1 (SP);
    resultFlags(Y);
}

:TAM imm8    is op=0x53 ; imm8
{
    T = 0;
    local tmp:1 = imm8;
    if (tmp == 0x01) goto <tam0>;
    if (tmp == 0x02) goto <tam1>;
    if (tmp == 0x04) goto <tam2>;
    if (tmp == 0x08) goto <tam3>;
    if (tmp == 0x10) goto <tam4>;
    if (tmp == 0x20) goto <tam5>;
    if (tmp == 0x40) goto <tam6>;
    if (tmp == 0x80) goto <tam7>;
<tam0>
    MPR0 = A;
    goto <end>;
<tam1>
    MPR1 = A;
    goto <end>;
<tam2>
    MPR2 = A;
    goto <end>;
<tam3>
    MPR3 = A;
    goto <end>;
<tam4>
    MPR4 = A;
    goto <end>;
<tam5>
    MPR5 = A;
    goto <end>;
<tam6>
    MPR6 = A;
    goto <end>;
<tam7>
    MPR7 = A;
<end>
}

:TAX    is op=0xAA
{
    T = 0;
    X = A;
    resultFlags(X);
}

:TAY    is op=0xA8
{
    T = 0;
    Y = A;
    resultFlags(Y);
}

:TDD src16, dst16, lng16   is op=0xC3 ; src16; dst16; lng16    #Transfer Decrement Decrement
{
    *:1 (SP) = Y;  #push Y
    SP = SP - 1;
    *:1 (SP) = A;  #push A
    SP = SP - 1;
    *:1 (SP) = X;  #push X
    SP = SP - 1;
    T = 0;
    local src:2 = src16;
    local dst:2 = dst16;
    local lng:2 = lng16;
    local value:1 = 0;
<loop>
    value = *:1 src;
    *:1 dst = value;
    src = src - 1;
    dst = dst - 1;
    lng = lng - 1;
    if (lng != 0) goto <loop>;
    SP = SP + 1;  #pull X
    X = *:1 (SP);
    resultFlags(X);
    SP = SP + 1;  #pull A
    A = *:1 (SP);  
    resultFlags(A);
    SP = SP + 1;  #pull Y
    Y = *:1 (SP);
    resultFlags(Y);
}

:TIA src16, dst16, lng16   is op=0xE3 ; src16; dst16; lng16 #Transfer Increment Alternate
{
    *:1 (SP) = Y;  #push Y
    SP = SP - 1;
    *:1 (SP) = A;  #push A
    SP = SP - 1;
    *:1 (SP) = X;  #push X
    SP = SP - 1;
    T = 0;
    local src:2 = src16;
    local dst:2 = dst16;
    local lng:2 = lng16;
    local value:1 = 0;
    local alt:1 = 0;
<loop>
    value = *:1 src;
    dst = dst + zext(alt);
    *:1 dst = value;
    src = src + 1;
    lng = lng - 1;
    alt = !alt;
    if (lng != 0) goto <loop>;
    SP = SP + 1;  #pull X
    X = *:1 (SP);
    resultFlags(X);
    SP = SP + 1;  #pull A
    A = *:1 (SP);  
    resultFlags(A);
    SP = SP + 1;  #pull Y
    Y = *:1 (SP);
    resultFlags(Y);
}

:TII src16, dst16, lng16   is op=0x73 ; src16; dst16; lng16 #Transfer Increment Increment
{
    *:1 (SP) = Y;  #push Y
    SP = SP - 1;
    *:1 (SP) = A;  #push A
    SP = SP - 1;
    *:1 (SP) = X;  #push X
    SP = SP - 1;
    T = 0;
    local src:2 = src16;
    local dst:2 = dst16;
    local lng:2 = lng16;
    local value:1 = 0;
<loop>
    value = *:1 src;
    *:1 dst = value;
    src = src + 1;
    dst = dst + 1;
    lng = lng - 1;
    if (lng != 0) goto <loop>;
    SP = SP + 1;  #pull X
    X = *:1 (SP);
    resultFlags(X);
    SP = SP + 1;  #pull A
    A = *:1 (SP);  
    resultFlags(A);
    SP = SP + 1;  #pull Y
    Y = *:1 (SP);
    resultFlags(Y);
}

:TIN src16, dst16, lng16   is op=0xD3 ; src16; dst16; lng16 #Transfer Increment
{
    *:1 (SP) = Y;  #push Y
    SP = SP - 1;
    *:1 (SP) = A;  #push A
    SP = SP - 1;
    *:1 (SP) = X;  #push X
    SP = SP - 1;
    T = 0;
    local src:2 = src16;
    local dst:2 = dst16;
    local lng:2 = lng16;
    local value:1 = 0;
<loop>
    value = *:1 src;
    *:1 dst = value;
    src = src + 1;
    lng = lng - 1;
    if (lng != 0) goto <loop>;
    SP = SP + 1;  #pull X
    X = *:1 (SP);
    resultFlags(X);
    SP = SP + 1;  #pull A
    A = *:1 (SP);  
    resultFlags(A);
    SP = SP + 1;  #pull Y
    Y = *:1 (SP);
    resultFlags(Y);
}

:TMA imm8    is op=0x43 ; imm8
{
    T = 0;
    local tmp:1 = imm8;
    if (tmp == 0x01) goto <tam0>;
    if (tmp == 0x02) goto <tam1>;
    if (tmp == 0x04) goto <tam2>;
    if (tmp == 0x08) goto <tam3>;
    if (tmp == 0x10) goto <tam4>;
    if (tmp == 0x20) goto <tam5>;
    if (tmp == 0x40) goto <tam6>;
    if (tmp == 0x80) goto <tam7>;
<tam0>
    A = MPR0;
    goto <end>;
<tam1>
    A = MPR1;
    goto <end>;
<tam2>
    A = MPR2;
    goto <end>;
<tam3>
    A = MPR3;
    goto <end>;
<tam4>
    A = MPR4;
    goto <end>;
<tam5>
    A = MPR5;
    goto <end>;
<tam6>
    A = MPR6;
    goto <end>;
<tam7>
    A = MPR7;
<end>
}

:TRB OPTB    is (tcc=0 & taaa=0 & td=1) ... & OPTB
{
    T = 0;
    local op1 = OPTB;
    local result = op1 & ~A;
    Z = (result == 0);
    N = op1[7,1];
    V = op1[6,1];
    T = 0;
}

:TSB OPTB    is (tcc=0 & taaa=0 & td=0) ... & OPTB
{
    T = 0;
    local op1 = OPTB;
    local result = A | op1;
    Z = (result == 0);
    N = op1[7,1];
    V = op1[6,1];
    T = 0;
}

:TST "#"imm82, imm8    is op=0x83; imm8; imm82
{
    T = 0;
    local zpaddr:2 = 0x2000 + imm8;
    local memvalue:1 = *:1 zpaddr;
    local immvalue:1 = imm82;
    local result:1 = memvalue & immvalue;
    Z = (result == 0);
    N = memvalue[7,1];
    V = memvalue[6,1];
    T = 0;
}

:TST "#"imm82, imm8,X    is op=0xA3 & X; imm8; imm82
{
    T = 0;
    local tmp:2 = zext(imm8 + X);
    local zpaddr:2 = 0x2000 + tmp;
    local memvalue:1 = *:1 zpaddr;
    local immvalue:1 = imm82;
    local result:1 = memvalue & immvalue;
    Z = (result == 0);
    N = memvalue[7,1];
    V = memvalue[6,1];
    T = 0;
}

:TST "#"imm82, imm16    is op=0x93; imm16; imm82
{
    T = 0;
    local tmp:2 = imm16;
    local memvalue:1 = *:1 tmp;
    local immvalue:1 = imm82;
    local result:1 = memvalue & immvalue;
    Z = (result == 0);
    N = memvalue[7,1];
    V = memvalue[6,1];
    T = 0;
}

:TST "#"imm82, imm16,X    is op=0xB3 & X; imm16; imm82
{
    T = 0;
    local tmp:2 = imm16 + zext(X);
    local memvalue:1 = *:1 tmp;
    local immvalue:1 = imm82;
    local result:1 = memvalue & immvalue;
    Z = (result == 0);
    N = memvalue[7,1];
    V = memvalue[6,1];
    T = 0;
}

:TSX    is op=0xBA
{
    T = 0;
    X = S;
    resultFlags(X);
}

:TXA    is op=0x8A
{
    T = 0;
    A = X;
    resultFlags(A);
}

:TXS    is op=0x9A
{
    T = 0;
    S = X;
}

:TYA    is op=0x98
{
    T = 0;
    A = Y;
    resultFlags(A);
}
